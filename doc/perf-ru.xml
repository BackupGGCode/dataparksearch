<sect1 id="perf">
	<title>К вопросу производительности <application>DataparkSearch</application>
<indexterm><primary>К вопросу производительности</primary></indexterm>
</title>

<para>Способ хранения cache - самый быстрый в <application>DataparkSearch</application>.
Используйте его, если хотите получить максимальную скорость поиска.
</para>
<para><indexterm><primary>Команда</primary><secondary>ColdVar</secondary></indexterm>
Если после окончания индексирования содержимое вашей директории <filename>/var</filename> не изменяется, вы можете
выключить блокировку файлов при открытиии используя команду <command>"ColdVar yes"</command> в файле <filename>search.htm</filename>
(или в файле <filename>searchd.conf</filename>, если используется <command>searchd</command>). Это позволит вам сэкономить некоторое время,
затрачиваемое на блокировку файлов.
</para>


<sect2 id="searchd-rec">
<title>Рекомендация использовать <command>searchd</command></title>
<para>Если вы планируете использовать синонимы, стоп-слова или данные ispell,
рекомендуется воспользоваться демоном <command>searchd</command> (См. <xref linkend="searchd"/>).
Демон <command>searchd</command> при запуске загружает эти данные и держит их в памяти.
Это позволяет сократить среднее время выполнения запросов на поиск.
</para>
<para>Таже <command>searchd</command> может загружать предварительно в память некоторые данные об URL 
(по 20 байт на каждую проиндекированую страницу) и лимиты cache mode (4 или 8 байт на каждый URL в зависимости от
типа лимита). Это позволяет сократить среднее время обработки запроса.
</para>
</sect2>

<sect2 id="mfs-rec">
<title>Рекомендация использовать файловую систему в памяти (mfs)</title>
<para>Если вы планируете использовать cache mode и имеете достаточно оперативной памяти на вашем компьютере, 
вы можете разместить директорию <filename>/usr/local/dpsearch/var</filename>
на файловой системе в памяти компьютера (mfs). Это ускорит как индексирование, так и поиск.
</para>
<para>Если памяти недостаточно, что поместить в ней <filename>/usr/local/dpsearch/var</filename> целиком, 
вы можете разместить на mfs любую из директорий <filename>/usr/local/dpsearch/var/tree</filename>,
<filename>/usr/local/dpsearch/var/url</filename> или <filename>/usr/local/dpsearch/var/store</filename>.
</para>
</sect2>

<sect2 id="urlinfo-cmd">
<title>Команда URLInfoSQL</title>
<indexterm><primary>Команда</primary><secondary>URLinfoSQL</secondary></indexterm>
<para>Для способа хранения cache вы можете использовать команду <command>URLInfoSQL no</command> для выключения сохранения
информации об URL в SQL-базе. Однако использовав эту команду, вы потеряете возможность использовать лимиты по языку и типу документов.
</para>
</sect2>

<sect2 id="markforindex-cmd">
<title>Команда MarkForIndex</title>
<indexterm><primary>Команда</primary><secondary>MarkForIndex</secondary></indexterm>
<para>По умолчанию, <application>DataparkSearch</application> помечает все URL, отбираемые к индексированию, как ожидающие индексирования
через 4 часа. 
Это позволяет избежать возможного одновременного индексирования одно и того же URL двумя параллельно запущеными копиями indexer.
Однако для больших поисковых баз эта операция пометки может занять некоторое время. Вы можете выключить такую пометку используя команду
<command>"MarkForIndex no"</command> в вашем файле конфигурации <filename>indexer.conf</filename>.
</para>
</sect2>


<sect2 id="checkinsertsql-cmd">
<title>Команда <command>CheckInsertSQL</command></title>
<indexterm><primary>Команда</primary><secondary>CheckInsertSQL</secondary></indexterm>
<para>По умолчанию, <application>DataparkSearch</application> пытается добавлять данные в SQL-базу вне зависимости, 
есть она уже там или нет. На некоторых системах, это может вызывать к дополнительной обработке сообщений об ошибках.
Чтобы избежать таких ошибок, Вы можете добавить команду <command>CheckInsertSQL yes</command> в ваш файл конфигурации
<filename>indexer.conf</filename>.
</para>
</sect2>


	<sect2 id="perf-mysql">
		<title>Производительность <application>MySQL</application></title>

		<para>Пользователи <application>MySQL</application> могут задать
опцию <option>DELAY_KEY_WRITE=1</option> для таблиц <application>DataparkSearch</application>.
Это позволит быстрее обновлять индексы, т.к.они не будут записываться на диск пока файл не будет закрыт.
<option>DELAY_KEY_WRITE</option> целиком исключает обновление индексов на диске. </para>

		<para>С этой опцией индексы хранятся только в памяти и записываются на диск
в последнюю очередь, по команду  <command>FLUSH TABLES</command> или по завершению <command>mysqld</command>.
Запись одновлённых индексов на диск может занимать минуты и нетерпеливые пользователи могут прибить сервер
командой <literal>kill -9</literal> и этим разрушить индексные файлы.
Другим неудобством является необходимость запуска <literal>myisamchk</literal> для этих таблиц перед стартом
<command>mysqld</command> для проверки, на случай, если <literal>mysqld</literal> был убит до этого.
</para>

		<para>По этим причинам мы не включили эту опцию в структуру наших таблиц по умолчанию.
Т.к. вся информация в индексах может быть восстановлена из данных, находящихся в таблицах, вы не потеряете данные,
используя опцию <option>DELAY_KEY_WRITE</option>. Но используйте её на свой страх и риск.
</para>

	</sect2>
	<sect2 id="perf-optimization">
		<title>Оптимизация после индексирования</title>

		<para>Этот раздел был добавлен Randy Winch <email>gumby@cafes.net</email>
		</para>

		<para>У меня есть мысля о производителности, которая может заинтересовать некоторых из вас.
Я использую <literal>RH 6.2</literal> с обновлением ядра <literal>2.2.14-6.1.1</literal> (поддерживает файлы свыше 2 гигабайт)
и <literal>mysql 2.23.18-alpha</literal>. Я проиндексировал весь наш сайт используя <application>mnoGoSearch 3.0.18</application>:
		<programlisting>

          mnoGoSearch statistics

    Status    Expired      Total
   -----------------------------
       200     821178    2052579 OK
       301        797      29891 Moved Permanently
       302          3          3 Moved Temporarily
       304          0          7 Not Modified
       400          0         99 Bad Request
       403          0          7 Forbidden
       404      30690     100115 Not found
       500          0          1 Internal Server Error
       503          0          1 Service Unavailable
   -----------------------------
     Total     852668    2182703

</programlisting>
</para>

		<para>Я оптимизировал данные, выгрузив их в файл используя <option>SELECT * INTO OUTFILE</option>,
отсортировал их при помощи системной процедуры сортировки по полю <literal>word (CRC)</literal>
и затем загрузил их обратно в базу данных, используя процедуру, описанную в 
<ulink url="http://www.mysql.com/documentation/mysql/commented/manual.php?section=Insert_speed">mysql online manual</ulink>.</para>

		<para>Производительность великолепна. Мой любимый тест - поиск "John Smith".
Оптимизированная база показала результат в 13 секунд. База до оптимизации показывала примерно 73 секунды.</para>

		<programlisting>
Search results: john : 620241 smith : 177096
Displaying documents 1-20 of total 128656 found
</programlisting>

		<!--para>Вы можете скачать скрипт <ulink url="http://mnogosearch.org/download.html">optimize.sh</ulink>
с нашего сервера. Он написан Joe Frost <email>joe_frost@omnis-software.com</email> и реализует идею Randy.</para-->

	</sect2>

<sect2 id="ares">
<title>Библиотека асинхронного резолвера</title>
<para>Использование <ulink url="ftp://athena-dist.mit.edu/pub/ATHENA/ares/">ares</ulink>, 
библиотеки асинхронного резолвера (dns/ares в коллекции портов FreeBSD), позволяет для каждой индексирующей нити выполнять 
запросы к DNS без блокировки. Пожалуйста учтите, это также повышает число одновременных запросов к вашему DNS серверу.
</para>
</sect2>

</sect1>
